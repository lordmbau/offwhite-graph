type Query{
  hello: String

  airplanes: [airplane]
  airplane(plane: Uairplane!): airplane

  departments: [department]
  department(department: Udepartment!): department

  users: [user]
  user(user: Uuser!): user

  defects: [defect]
  defect(defect: Udefect!): defect

  rotables: [rotable]
  rotable(rotable: Urotable!): rotable

  statuses: [status]
  status(status: Ustatus!): status

  manuals: [manual]
  manual(manual: Umanual!): manual
}

type Mutation{
  airplanes: airplaneMutations
  departments: departmentMutations
  users: userMutations
  defects: defectMutations
  rotables: rotableMutations
  statuses: statusMutations
  manuals: manualMutations
}

type airplane{
  id: String
  fleet: String
  reg_no: String
}

input Iairplane{
  fleet: String!
  reg_no: String!
}

input Uairplane{
  id: String!
  fleet: String
  reg_no: String
}

type airplaneMutations{
  create(airplane: Iairplane): airplane
  update(airplane: Uairplane): airplane
  archive(airplane: Uairplane): airplane
  restore(airplane: Uairplane): airplane
}

type department{
  id: String
  name: String
  description: String
  hod: user
  users: [user]
}

input Idepartment{
  name: String!
  description: String!
  hod: String!
}

input Udepartment{
  id: String!
  name: String
  description: String
  hod: String
}

type departmentMutations{
  create(department: Idepartment): department
  update(department: Udepartment): department
  archive(department: Udepartment): department
  restore(department: Udepartment): department
}

enum userTypes{
  SYSADMIN
  PILOT
  HOD
  LINE_PLANNING
  LINE_MAINTENANCE
}

type user{
  id: String
  name: String
  phone: String
  department: department
  type: userTypes
}

input Iuser{
  name: String!
  phone: String!
  department: String
  type: userTypes!
}

input Uuser{
  id: String!
  name: String
  phone: String
  department: String
  type: userTypes
}

type userMutations{
  create(user: Iuser): user
  update(user: Uuser): user
  archive(user: Uuser): user
  restore(user: Uuser): user
}

type defect{
  id: String
  pilot: user
  airplane: airplane
  description: String
  full_description: String
  manual: manual
  status: status
}

input Idefect{
  pilot: String!
  airplane: String!
  description: String!
}

input Udefect{
  id: String!
  pilot: String
  airplane: String
  description: String
  full_description: String
  manual: String
}

type defectMutations{
  create(defect: Idefect): defect
  update(defect: Udefect): defect
  archive(defect: Udefect): defect
  restore(defect: Udefect): defect
}

type manual{
  id: String
  name: String
  ata_chapter: String
  ata_subchapter: String
  link: String
}

input Imanual{
  name: String!
  ata_chapter: String!
  ata_subchapter: String!
  link: String!
}

input Umanual{
  id: String!
  name: String
  ata_chapter: String
  ata_subchapter: String
  link: String
}

type manualMutations{
  create(manual: Imanual): manual
  update(manual: Umanual): manual
  archive(manual: Umanual): manual
  restore(manual: Umanual): manual
}

type rotable{
  id: String
  name: String
  part_no: String
  serial_no: String
  airplane: airplane
}

input Irotable{
  name: String!
  part_no: String!
  serial_no: String!
  airplane: String
}

input Urotable{
  id: String!
  name: String
  part_no: String
  serial_no: String
  airplane: String
}

type rotableMutations{
  create(rotable: Irotable): rotable
  update(rotable: Urotable): rotable
  archive(rotable: Urotable): rotable
  restore(rotable: Urotable): rotable
}

enum statusTypes{
  NEW
  COMPLETE
  IN_PROGRESS
}

type status{
  id: String
  type: statusTypes
  author: user
}

input Istatus{
  type: statusTypes!
  author: String!
}

input Ustatus{
  id: String!
  author: String
  type: statusTypes
}

type statusMutations{
  create(status: Istatus): status
  update(status: Ustatus): status
  archive(status: Ustatus): status
  restore(status: Ustatus): status
}